// Esteban Vergara Giraldo               ----------------
// Jonathan Betancur Espinoza           [ SPACE INVADERS ]           
// Miguel Angel Cock Cano                ----------------


// Aliens en una matriz 3 x 5   (3 filas de 5 aliens)
// Pudimos lograr 15 aliens!
// La nave se puede mover con WASD o con las flechas, como gustes

class Juego{
    field Array f1, f2, f3;           //arrays de booleanos sobre existencia de aliens
    field Array xBalas, yBalas;       //arrays con coordenadas en su interior para las balas
    field int puntaje;                //puntaje del juego, sube al matar aliens

    constructor Juego new(){
        return this;
    }

    method void juego(){
        var int x, y, xNave;            //variables del juego (posición de referencia de aliens y nave)
        var int i, frame, anim;         //variables auxiliares para iteración (listas, frames, animaciones)
        var int dir;                    //dirección del desplazamiento horizontal de los aliens (0=izq|1=der)
                                        //no me dejaba manejar condicionales con booleanos por alguna razón

        //posiciones de referencia iniciales de los aliens
        //es el alien inferior izquierdo
        let x = 3;  //va de 0 a 6 mientras los aliens oscilan
        let y = 6;  //va de 6 a 16

        //posición inicial de la nave (13). Va de 0 a 27.
        let xNave = 13;

        // puntaje obtenido por matar aliens.
        // puede subir 100, 150 o 200 puntos dependiendo
        // de la fila del alien al que se mató.
        let puntaje = 0;

        // arrays con booleanos para verificar la existencia
        // de los aliens de una fila (son 3 filas)
        // la f3 está en y, la f2 en y-2 y la f1 en y-4
        let f1 = Array.new(5);
        let f2 = Array.new(5);
        let f3 = Array.new(5);  //fila de enfrente

        // rellenando los arrays con "sí existe"
        let i = 0;
        while(i < 5){
            let f1[i] = true;
            let f2[i] = true;
            let f3[i] = true;
            let i = i + 1;
        }

        // Las balas son lanzadas cada 4 frames, desde la posición x en la que esté la nave (xNave).
        // Las balas se desplazan verticalmente desde la posición 15 hasta la 1, luego desaparecen.
        // Esa desaparición es registrada como un 0 en la coordenada Y. 
        // Si alguna bala (alguna posición del Array xBalas) tiene un 0 en la coordenada Y, 
        // su posición en los arrays puede ser reemplazada con una bala nueva.
        // Luego usaremos estas coordenadas para detectar su posible colisión con algún alien.
        let xBalas = Array.new(16); 
        let yBalas = Array.new(16); 

        // rellenando los arrays de balas con posiciones (X,Y) en (0,0)
        let i = 0;
        while(i < 16){
            let xBalas[i] = 0;
            let yBalas[i] = 0;
            let i = i + 1;
        }

        // array con las colisiones actuales, máximo 2
        // sus posiciones son [colision1, bala1, filaAlien1, columnaAlien1, 
        //                     colision2, bala2, filaAlien2, columnaAlien2]
        // colision_    : bool      ->  true: hubo colisión | false: no hubo colisión
        // bala_        : int       ->  indicador de bala que colisionó [0,15]
        // filaAlien_   : int       ->  fila del alien, de arriba hacia abajo [1,3]
        // columnaAlien_: int       ->  columna del alien, de izquierda a derecha [0,5]
        // otra opción es volver los arrays de aliens y balas parámetros, y modificarlos
        // desde métodos y no funciones
        /**
        let colision = new.Array(6);
        let i = 0;
        while(i < 6){
            let colision[i] = 0;
            let i = i + 1;
        }*/

        // juego durante 16 bajadas de los aliens
        // en el y=16, los aliens tocan la nave y pierde.
        let frame = 0;  // contador de frames
        let anim = 1;  // contador de animaciones

        while(y < 16){

            do Screen.clearScreen();

            do imprimirPuntuaje();

            do updateAliens(x, y, anim);

            let xNave = Juego.teclaNave(xNave);

            do Juego.updateNave(xNave);

            // creación de bala cada 4 frames
            if(anim = 4){
                let i = 0;
                while(i < 16){
                    if(yBalas[i]=0){            // se busca una posición de bala sin usar (Y = 0)
                        let yBalas[i] = 15;     // se le asigna Y = 15 (recordar que va de 15 a 1)
                        let xBalas[i] = xNave;  // su X será el xNave de ese momento, y no se cambiará.
                        let i = 16;             // nos salimos del ciclo manualmente
                    }
                    let i = i + 1;
                }
            }

            do updateBalas();

            // revisión de colisiones.
            // si hay colisión el alien desaparece (se coloca su aliens[i] en false),
            // y la bala también (se coloca su yBalas[i] en 0).
            // dependiendo de la fila del alien asesinado, el puntaje subirá 100, 150 o 200 puntos.
            // HIPOTÉTICA FUNCIÓN DE COLISIÓN
            // otra opción es volver los arrays de aliens y balas parámetros, y modificarlos
            // desde métodos y no funciones
            //let colision = Main.colisiones()

            // se le resta 1 al Y de cada bala existente, así suben
            do subirBalas();

            // cada 20 frames , el alien baja
            if(frame = 20){
                let y = y + 1;
                let frame = 0;
                let puntaje = puntaje + 100;    //puntaje provisional
            }

            // cada 4 frames los aliens se mueven horizontalmente
            // el sprite de los aliens (animación) cambia cada 2, pero eso
            // es manejado en el área de dibujo.
            if(anim = 4){
                let anim = 0;

                // dir es dirección, 0 = izq | 1 = der
                //aquí se mueven horizontalmente los aliens

                if(dir=0){              //si los aliens se mueven a la izquierda
                    if(~(x=0)){         //y no han tocado el borde (0)
                        let x = x - 1;  //se moverán más a la izquierda.
                    }else{              //de lo contrario
                        let dir = 1;    //comenzarán a moverse a la derecha
                        let x = x + 1;  
                    }
                }else{                  //si los aliens se mueven a la derecha
                    if(~(x=6)){         //y no han tocado el borde (6)
                        let x = x + 1;  //se moverán más a la derecha.
                    }else{              //de lo contrario
                        let dir = 0;    //comenzarán a moverse a la izquierda
                        let x = x - 1;  
                    }
                }
            }

            let frame = frame + 1;
            let anim = anim + 1;

            // el tiempo de espera de cambio de frames (la velocidad
            // del juego) va subiendo a medida que el juego avanza.
            do Sys.wait(500-(y*20));
        }

        return;
    }

    method void imprimirPuntuaje(){
        do Output.moveCursor(0,25);
        do Output.printString("Puntaje: ");
        do Output.printInt(puntaje);
        return;
    }

    function int teclaNave(int xNave){
        var int keyNave;
        // se guarda el ASCII de la tecla que se está presionando
        let keyNave = Keyboard.keyPressed();

        //            leftKey           A
        if((keyNave = 130) | (keyNave = 65)){    
            if(~(xNave = 0)){
                return(xNave - 1);      //izquierda
            }else{
                return(27);             //si está en el borde, aparece a la derecha
            }
        }

        //           rightKey           D
        if((keyNave = 132) | (keyNave = 68)){
            if(~(xNave = 27)){
                return(xNave + 1);      //derecha
            }else{
                return(0);              //si está en el borde, aparece a la izquierda
            }
        }

        // si no se apretó ninguna tecla, no hay actualización
        return(xNave);
    }


    method void updateAliens(int x, int y, int anim){
        var int i, sprite, xAux, yAuxf1, yAuxf2, yAuxf3;
        let i = 0;

        // según el conteo de animación, se asigna un sprite para ser dibujado
        if ( (anim=1)|(anim=2) ) {
            let sprite = 1;
        }else{                      //anim = 3 | anim = 4
            let sprite = 2;
        }

        //las coordenadas auxiliares son cálculos necesarios para dibujar los
        // aliens donde se debe, según la cuadrícula creada. 
        //Antes mandábamos los parámetros y se calculaba a la hora de
        // dibujar, pero se resultaba calculando lo mismo muchas veces.
        //Para optimizar procesos, guardamos los resultados en variables auxiliares.
        //Estas son para la posición vertical de las filas de aliens.
        let yAuxf1 = ((y-4)*512);
        let yAuxf2 = ((y-2)*512);
        let yAuxf3 = (y*512);

        // revisa a los aliens por fila, los que existan los dibuja según las coordenadas
        while(i < 5){

            //Variable auxiliar para la posición horizontal de las columnas de aliens.
            let xAux = (i*5) + x;

            if(f1[i] = true){
                do Juego.draw(xAux, yAuxf1, sprite);
            }
            if(f2[i] = true){
                do Juego.draw(xAux, yAuxf2, sprite);
            }
            if(f3[i] = true){
                do Juego.draw(xAux, yAuxf3, sprite);
            }
            let i = i + 1;
        }
        return;
    }

    function void draw(int x, int y, int sprite) {
        var int memAddress; 
                    //   screen    vertical    horizontal
        let memAddress = 16386  +  y  +  x;   //desde donde comienza el dibujo

        // dependiendo del contador de animación, dibuja un sprite u otro
        if (sprite = 1) {
            do Memory.poke(memAddress -224, 2064);
            do Memory.poke(memAddress -192, 1056);
            do Memory.poke(memAddress -160, 4080);
            do Memory.poke(memAddress -128, 7128);
            do Memory.poke(memAddress -96,  16380);
            do Memory.poke(memAddress -64,  12276);
            do Memory.poke(memAddress -32,  10260);
            do Memory.poke(memAddress, 1632);
        }else{  // sprite = 2
            do Memory.poke(memAddress -224, 2064);
            do Memory.poke(memAddress -192, 9252);
            do Memory.poke(memAddress -160, 12276);
            do Memory.poke(memAddress -128, 15324);
            do Memory.poke(memAddress -96,  16380);
            do Memory.poke(memAddress -64,  8184);
            do Memory.poke(memAddress -32,  2064);
            do Memory.poke(memAddress, 4104);
        }
        return;
    }

    // nave pos 0-27, 13 es la mitad, comienza allí por default
    function void updateNave(int x) {
        var int memAddress; 
        //               screen   horizontal
        let memAddress = 24482 +  x;   //desde donde comienza el dibujo

        do Memory.poke(memAddress -224, 384);
        do Memory.poke(memAddress -192, 384);
        do Memory.poke(memAddress -160, 4080);
        do Memory.poke(memAddress -128, 31710);
        do Memory.poke(memAddress -96,  5064);
        do Memory.poke(memAddress -64,  8184);
        do Memory.poke(memAddress -32,  3504);
        do Memory.poke(memAddress, 12684);

        return;
    }


    /**
    Vida de una bala:
        se crea
        (inicio ciclo)
            se dibuja
            se revisa colisión
            se borra existencia
            se resta 1 a Y, la bala sube
        (continúa hasta que...)
        llega hasta Y = 0, desaparece
        es reemplazada con otra bala */
    method void updateBalas(){
        var int i;

        // Para las 16 posibles balas, mientras la bala no esté desaparecida
        // o sea inexistente (denotado con un 0 en su coordenada Y)
        // será dibujada.
        // Luego, también se actualizará su posición
        let i = 0;
        while(i<16){
            if(~(yBalas[i] = 0)){
                do Juego.drawBala(xBalas[i], yBalas[i]);
            }
            let i = i + 1;
        }
        return;
    }

    function void drawBala(int x, int y){
        var int memAddress;
        let memAddress = 16418  +  (y*512)  +  x;
        do Memory.poke(memAddress, 384);
        do Memory.poke(memAddress +32, 576);
        do Memory.poke(memAddress +64, 832);
        do Memory.poke(memAddress +96, 832);
        do Memory.poke(memAddress +128, 832);
        do Memory.poke(memAddress +160, 960);
        do Memory.poke(memAddress +192, 960);
        return;
    }

    // método para subir las balas restándole 1 a su yBalas[i]
    method void subirBalas(){
        var int i;
        let i = 0;
        while(i < 16){
            if(~(yBalas[i] = 0)){               //sólo se le resta si la bala existe
                let yBalas[i] = yBalas[i] - 1;
            }
            let i = i + 1;
        }
        return;
    }
}

/**
PROJECT DEDICATED TO AYANAMI REI
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⡤⠤⠤⠤⢤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠤⠖⠊⠉⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠒⠦⢄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠖⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠈⠑⠦⣀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀ ⠈⠑⢦⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⣉⡤⠖⠊⡏⢉⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢫⠉⢱⠦⣄⡀⠙⢦⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢠⠏⡞⠁⠀⣠⢞⡵⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⡜⣇⠀⠙⢆⠈⢧⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢠⠋⠀⢧⡠⣾⡵⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢞⣧⠀⢸⠂⠀⣧⠀
⠀⠀⠀⠀⠀⠀⠀⡟⠀⠀⠀⠙⠉⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠈⠛⠒⠋⠀ ⠀⢸⠀
⠀⠀⠀⠀⠀⠀⢸⠁⠀⠀⠀⠀⢠⠄⠀⠀⠀⠀⢠⢷⠀⠀⠀⠀⠀⠀⠀⠀⡄⠀⣸⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  ⠀⢨⠀
⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡆⠀⠀⢀⠀⠀⢸⠈⢇⠀⢰⠀⠀⠀⠀⠀⡇⢠⠃⢻⠀⢀⡔⠀⠀⠀⠀⠀⠀⠀ ⠀⠀ ⡇⠀
⠀⠀⠀⠀⠀⠀⠈⡆⠀⠀⠀⠀⡇⠀⠀⠈⡵⠦⡼⠶⢾⣷⣸⣧⠀⠀⠀⣸⣧⣯⡶⣾⡴⡏⢀⣄⠀⠀⠀⠀⠀⠀⠀ ⡇⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢧⠀⠀⠀⠀⡇⠀⠀⡼⠁⠀⣀⣀⡀⠀⠉⠉⢦⠀⢠⠋⠉⠁⠀⣉⣸⣗⣉⡈⠳⣄⠀⠀⠀⠀ ⠀⡇⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠘⣴⡀⠀⠀⢃⣠⠞⣿⡷⡿⠛⣿⣿⣿⢶⡄⠈⠳⠋⠀⣰⢾⠛⢻⣿⣿⡿⣿⡈⡟⠂  ⠀⡇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣧⠀⠀⠈⠁⠀⠸⡇⢿⣽⣿⣿⣿⡇⠁⠀⠀⠀⠀⠀⢿⡵⣿⣿⣯⡇⠏⡹⠁⠀⠀ ⢀⡇⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡆⠀⠀⠀⠀⠀⠹⣌⠻⠿⠿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⠿⠿⠛⠀⣰⠃⠀⠀⠀⣠⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢆⢀⡀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡃⠀⠀⢀⡜⠁⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠑⢆⡀⠀⠈⠻⡍⠀⠀⠀⠀⠀⠒⠒⠂⠀⠀⠀⠀⠀⣀⣤⣟⠁⣠⠔⠃⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠢⣄⣿⠛⣻⣶⣤⣤⣤⣀⣠⣤⢤⣤⣴⡶⠫⠿⣿⡚⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⢻⣶⡄⢰⢳⠃⢀⣷⣿⠦⢯⣿⡗⠀⢧⠹⡄⠀⣤⣽⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣷⣶⣶⣿⣄⣾⠏⠀⠈⠑⢦⡀⣤⠞⠉⠀⠈⠱⣧⢠⣼⣿⣦⣽⣦⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠔⣻⣿⣿⣿⡿⠟⢹⣿⡄⠀⠀⠀⣾⣿⣿⡀⠀⠀⠀⣸⣿⣿⢿⣿⣿⣿⣿⣿⢦⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣰⣯⡟⠓⢍⠻⡿⠏⠁⠀⢸⢿⡟⠲⠶⠚⢱⠋⢲⠑⠒⠒⠊⣟⡩⢾⡇⠙⢿⣿⡿⢋⡼⡄⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⡼⠁⠀⠙⢤⡀⡻⠁⠀⠀⠀⡌⠶⣷⡶⠶⢦⠘⣗⠏⢀⠒⢒⣒⡻⢸⡇⠀  ⠀⢻⡕⠉⠀ ⠀⠳⡀⠀⠀
⠀⠀⠀⠀⠀⠀⢰⡀⠀⠀⠀⣰⠋⠁⠀⠀⠀⠀⣧⠀⠀⠉⠉⠉⠀ ⢸ ⠈⠉⠉⠀ ⠀⣠⡇⠀⠀  ⠀⠙⢦⣀⣀⡴⠃⠀
⠀⠀⠀⠀⠀⠀⠀⠑⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⡏⠳⣄⠀⠀⠀⠀  ⡇⠀⠀ ⠀⠀⡠⠚⠁⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⣇⡀⠈⠑⠢⣄⡀⠈⠁⠀⣀⠴⠋⠀⣀⣠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⣯⣽⠀⠀⠀⠀⠉⣷⠒⡋⠀⠀⠀ ⠀⢫⣵⡇⠀⠀⠀⠀⠀⠀⠀La creatura⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⡇⢰⠤⡄⠀⠀⠀⡇⠀⣇⠀⠀⠀ ⡤⢦⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠧⠞⠀⠹⣄⠀⢸⠀⠀⢹⣀⣠⠞⠀⠘⠦⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⢀⠀⠀⣀⣀⣉⡟⠀⠀ ⡏⠀⠀⠀ ⣀⡀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⢠⠎⠉⠉⠉⠀⠈⡇⠀⠀ ⡏⠉⠉⠉⠁⠉⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⢨⡄⠀⠀⠀⣆⣠⠇⠀⠀ ⣧⠀⣠⠀⠀⠀ ⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠈⠳⠤⠤⠶⠛⠁⠀⠀⠀ ⠈⠻⠿⣦⣤⡤⠞*/